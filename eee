import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;
import javax.swing.border.TitledBorder;

import com.HIS.Controller.DoctorTableModel;
import com.HIS.model.Doctor;
import com.toedter.calendar.JDateChooser;

public class DoctorProfilePanel extends JPanel {
    protected JTextField nameField, lnameField, contactField, emailField, addressField, adressField2, addressField3, pinField, ageField;
    protected JComboBox<String> qualificationDropDown;
    protected JComboBox<String> departmentDropdown, specializationDropdown;
    protected JSpinner startTimeSpinner, endTimeSpinner;
    protected JDateChooser dobPicker;
    protected JCheckBox[] dayCheckBoxes;
    protected JTextField consultationFeeField;
    protected JButton saveButton;

    protected final Map<String, List<String>> departmentSpecialisationMap = new HashMap<>();

    public DoctorProfilePanel(CardLayout cardLayout, JPanel container, DoctorTableModel tableModel) {
        setLayout(new BorderLayout(10, 10));

        JLabel header = new JLabel("Doctor Registration", JLabel.CENTER);
        header.setOpaque(true);
        header.setBackground(Color.BLUE);
        header.setForeground(Color.WHITE);
        header.setFont(new Font("Arial", Font.BOLD, 20));
        add(header, BorderLayout.NORTH);

        initializeDepartmentSpecializationMap();

        JPanel mainFormPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.HORIZONTAL;

        // PERSONAL DETAILS PANEL
        JPanel personalDetailsPanel = createSectionPanel("Personal Details");
        nameField = new JTextField(15);
        lnameField = new JTextField(15);
        dobPicker = new JDateChooser();
        ageField = new JTextField(15);
        ageField.setEditable(false);

        dobPicker.getDateEditor().addPropertyChangeListener("date", evt -> {
            Date selectedDate = dobPicker.getDate();
            if (selectedDate != null) {
                LocalDate dob = selectedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = calculateAge(dob);
                ageField.setText(String.valueOf(age));
            } else {
                ageField.setText("");
            }
        });

        addSectionField(personalDetailsPanel, "First Name:", nameField, "Last Name:", lnameField, gbc, 0);
        addSectionField(personalDetailsPanel, "Date of Birth:", dobPicker, "Age:", ageField, gbc, 1);

        // CONTACT DETAILS PANEL
        JPanel contactDetailsPanel = createSectionPanel("Contact Details");
        contactField = new JTextField(15);
        emailField = new JTextField(15);
        addressField = new JTextField(15);
        adressField2 = new JTextField(15);
        addressField3 = new JTextField(15);
        pinField = new JTextField(15);

        addSectionField(contactDetailsPanel, "Contact:", contactField, "Email:", emailField, gbc, 0);
        addSectionField(contactDetailsPanel, "Address Line 1:", addressField, "Address Line 2:", adressField2, gbc, 1);
        addSectionField(contactDetailsPanel, "Address Line 3:", addressField3, "Pincode:", pinField, gbc, 2);

        // ADDITIONAL DETAILS PANEL
        JPanel additionalDetailsPanel = createSectionPanel("Additional Details");
        qualificationDropDown = new JComboBox<>(new String[]{
                "MBBS,MD", "MBBS,MS", "MBBS,DNB", "MBBS,MCh", "MD,DM", "MBBS,FRCS", "MBBS,MD,FRCP", "MBBS,DO"
        });
        departmentDropdown = new JComboBox<>(departmentSpecialisationMap.keySet().toArray(new String[0]));
        specializationDropdown = new JComboBox<>();
        updateSpecializations();

        departmentDropdown.addActionListener(e -> updateSpecializations());

        startTimeSpinner = new JSpinner(new SpinnerDateModel());
        endTimeSpinner = new JSpinner(new SpinnerDateModel());
        startTimeSpinner.setEditor(new JSpinner.DateEditor(startTimeSpinner, "HH:mm"));
        endTimeSpinner.setEditor(new JSpinner.DateEditor(endTimeSpinner, "HH:mm"));

        String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
        dayCheckBoxes = new JCheckBox[days.length];
        JPanel daysPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 5));
        for (int i = 0; i < days.length; i++) {
            dayCheckBoxes[i] = new JCheckBox(days[i]);
            daysPanel.add(dayCheckBoxes[i]);
        }
        consultationFeeField = new JTextField(15);

        addSectionField(additionalDetailsPanel, "Qualification:", qualificationDropDown, "Department:", departmentDropdown, gbc, 0);
        addSectionField(additionalDetailsPanel, "Specialization:", specializationDropdown, "Start Time:", startTimeSpinner, gbc, 1);
        addSectionField(additionalDetailsPanel, "End Time:", endTimeSpinner, "Consultation Fee:", consultationFeeField, gbc, 2);
        addSectionField(additionalDetailsPanel, "Available Days:", daysPanel, null, null, gbc, 3);

        // BUTTON PANEL
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
        saveButton = new JButton("Save");
        saveButton.addActionListener(e -> saveDoctorProfile(tableModel));
        JButton clearButton = new JButton("Clear");
        clearButton.addActionListener(e -> clearFields());
        buttonPanel.add(saveButton);
        buttonPanel.add(clearButton);

        // Add Sections to Main Form Panel
        gbc.gridy = 0;
        mainFormPanel.add(personalDetailsPanel, gbc);
        gbc.gridy++;
        mainFormPanel.add(contactDetailsPanel, gbc);
        gbc.gridy++;
        mainFormPanel.add(additionalDetailsPanel, gbc);
        gbc.gridy++;
        mainFormPanel.add(buttonPanel, gbc);

        add(mainFormPanel, BorderLayout.CENTER);
        JButton goToBrowserButton = new JButton("Go to Browser Page");
        goToBrowserButton.addActionListener(e -> cardLayout.show(container, "Browser"));
        add(goToBrowserButton, BorderLayout.SOUTH);
    }

    private JPanel createSectionPanel(String title) {
        JPanel sectionPanel = new JPanel(new GridBagLayout());
        sectionPanel.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY), title,
                TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.TOP, new Font("Arial", Font.BOLD, 14)));
        return sectionPanel;
    }

    private void addSectionField(JPanel panel, String label1, JComponent field1, String label2, JComponent field2, GridBagConstraints gbc, int row) {
        gbc.gridx = 0;
        gbc.gridy = row;
        gbc.weightx = 0.5;
        panel.add(new JLabel(label1), gbc);

        gbc.gridx = 1;
        panel.add(field1, gbc);

        if (label2 != null && field2 != null) {
            gbc.gridx = 2;
            panel.add(new JLabel(label2), gbc);

            gbc.gridx = 3;
            panel.add(field2, gbc);
        }
    }

    private void updateSpecializations() {
        String selectedDepartment = (String) departmentDropdown.getSelectedItem();
        List<String> specializations = departmentSpecialisationMap.getOrDefault(selectedDepartment, Collections.emptyList());
        specializationDropdown.removeAllItems();
        for (String specialization : specializations) {
            specializationDropdown.addItem(specialization);
        }
    }

    protected void saveDoctorProfile(DoctorTableModel tableModel) {
        // Existing save logic (unchanged)
    }

    private void clearFields() {
        // Existing clear logic (unchanged)
    }

    public void initializeDepartmentSpecializationMap() {
        departmentSpecialisationMap.put("Cardiology", Arrays.asList("Pediatric Cardiology", "Electrophysiology"));
        departmentSpecialisationMap.put("Dermatology", Arrays.asList("Cosmetic Dermatology", "Pediatric Dermatology"));
        departmentSpecialisationMap.put("Neurology", Arrays.asList("Neuroimunology", "Epileptologist", "Pediatric Neurology"));
        departmentSpecialisationMap.put("Pediatrics", Arrays.asList("Pediatric Cardiology", "Pediatric Neurology", "Pediatric Endocrinology"));
    }

    private int calculateAge(LocalDate birthDate) {
        return Period.between(birthDate, LocalDate.now()).getYears();
    }
}
